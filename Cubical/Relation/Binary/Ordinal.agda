{-# OPTIONS --safe #-}
module Cubical.Relation.Binary.Ordinal where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.HalfAdjoint
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Transport
open import Cubical.Foundations.SIP

open import Cubical.Data.Sigma

open import Cubical.Reflection.RecordEquiv
open import Cubical.Reflection.StrictEquiv

open import Cubical.Displayed.Base
open import Cubical.Displayed.Auto
open import Cubical.Displayed.Record
open import Cubical.Displayed.Universe

open import Cubical.Relation.Binary.Base

open import Cubical.Induction.WellFounded

open Iso
open BinaryRelation


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' : Level

record IsOrdinal {A : Type ‚Ñì} (_<_ : A ‚Üí A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  constructor isordinal

  field
    is-set : isSet A
    is-prop-valued : isPropValued _<_

    is-trans : isTrans _<_
    well-founded : WellFounded _<_
    extensional : ‚àÄ a b ‚Üí (‚àÄ c ‚Üí (c < a ‚Üí c < b) √ó (c < b ‚Üí c < a)) ‚Üí a ‚â° b

  open WFI well-founded public

unquoteDecl IsOrdinalIsoŒ£ = declareRecordIsoŒ£ IsOrdinalIsoŒ£ (quote IsOrdinal)


record OrdinalStr (‚Ñì' : Level) (A : Type ‚Ñì) : Type (‚Ñì-max ‚Ñì (‚Ñì-suc ‚Ñì')) where

  constructor ordinalstr

  field
    _<_         : A ‚Üí A ‚Üí Type ‚Ñì'
    isOrdinal : IsOrdinal _<_

  infixl 7 _<_

  open IsOrdinal isOrdinal public

Ordinal : ‚àÄ ‚Ñì ‚Ñì' ‚Üí Type (‚Ñì-max (‚Ñì-suc ‚Ñì) (‚Ñì-suc ‚Ñì'))
Ordinal ‚Ñì ‚Ñì' = TypeWithStr ‚Ñì (OrdinalStr ‚Ñì')

ordinal : (A : Type ‚Ñì) (_<_ : A ‚Üí A ‚Üí Type ‚Ñì') (h : IsOrdinal _<_) ‚Üí Ordinal ‚Ñì ‚Ñì'
ordinal A _<_ h = A , ordinalstr _<_ h

record IsOrdinalEquiv {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
  (M : OrdinalStr ‚Ñì‚ÇÄ' A) (e : A ‚âÉ B) (N : OrdinalStr ‚Ñì‚ÇÅ' B)
  : Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') ‚Ñì‚ÇÅ')
  where
  constructor
   isposetequiv
  -- Shorter qualified names
  private
    module M = OrdinalStr M
    module N = OrdinalStr N

  field
    pres< : (x y : A) ‚Üí x M.< y ‚âÉ equivFun e x N.< equivFun e y

  pres‚Åª¬π< : (x y : B) ‚Üí x N.< y ‚âÉ invEq e x M.< invEq  e y
  pres‚Åª¬π< x y = subst2 (Œª x' y' ‚Üí x' N.< y' ‚âÉ invEq e x M.< invEq e y)
                       (secEq e x) (secEq e y)
                       (invEquiv (pres< (invEq e x) (invEq e y)))

OrdinalEquiv : (M : Ordinal ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (M : Ordinal ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ') ‚Üí Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (‚Ñì-max ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'))
OrdinalEquiv M N = Œ£[ e ‚àà ‚ü® M ‚ü© ‚âÉ ‚ü® N ‚ü© ] IsOrdinalEquiv (M .snd) e (N .snd)

isPropIsOrdinal : {A : Type ‚Ñì} (_<_ : A ‚Üí A ‚Üí Type ‚Ñì') ‚Üí isProp (IsOrdinal _<_)
isPropIsOrdinal _<_ = isOfHLevelRetractFromIso 1 IsOrdinalIsoŒ£
  (isPropŒ£ isPropIsSet Œª isSetA ‚Üí
    isPropŒ£ (isPropŒ†2 Œª _ _ ‚Üí isPropIsProp) Œª isPropValued< ‚Üí
    isProp√ó2 (isPropŒ†5 Œª _ _ _ _ _ ‚Üí isPropValued< _ _)
             (isPropŒ† isPropAcc)
             (isPropŒ†3 Œª _ _ _ ‚Üí isSetA _ _))

ùíÆ·¥∞-Ordinal : DUARel (ùíÆ-Univ ‚Ñì) (OrdinalStr ‚Ñì') (‚Ñì-max ‚Ñì ‚Ñì')
ùíÆ·¥∞-Ordinal =
  ùíÆ·¥∞-Record (ùíÆ-Univ _) IsOrdinalEquiv
    (fields:
      data[ _<_ ‚à£ autoDUARel _ _ ‚à£ pres< ]
      prop[ isOrdinal ‚à£ (Œª _ _ ‚Üí isPropIsOrdinal _) ])
    where
    open OrdinalStr
    open IsOrdinal
    open IsOrdinalEquiv

PosetPath : (M N : Ordinal ‚Ñì ‚Ñì') ‚Üí OrdinalEquiv M N ‚âÉ (M ‚â° N)
PosetPath = ‚à´ ùíÆ·¥∞-Ordinal .UARel.ua

-- an easier way of establishing an equivalence of posets
module _ {P : Ordinal ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ'} {S : Ordinal ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'} (e : ‚ü® P ‚ü© ‚âÉ ‚ü® S ‚ü©) where
  private
    module P = OrdinalStr (P .snd)
    module S = OrdinalStr (S .snd)

  module _ (isMon : ‚àÄ x y ‚Üí x P.< y ‚Üí equivFun e x S.< equivFun e y)
           (isMonInv : ‚àÄ x y ‚Üí x S.< y ‚Üí invEq e x P.< invEq e y) where
    open IsOrdinalEquiv
    open IsOrdinal

    makeIsOrdinalEquiv : IsOrdinalEquiv (P .snd) e (S .snd)
    pres< makeIsOrdinalEquiv x y = propBiimpl‚ÜíEquiv (P.isOrdinal .is-prop-valued _ _)
                                                    (S.isOrdinal .is-prop-valued _ _)
                                                    (isMon _ _) (isMonInv' _ _)
      where
      isMonInv' : ‚àÄ x y ‚Üí equivFun e x S.< equivFun e y ‚Üí x P.< y
      isMonInv' x y ex‚â§ey = transport (Œª i ‚Üí retEq e x i P.< retEq e y i) (isMonInv _ _ ex‚â§ey)

module _ {M : Ordinal ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ'} {N : Ordinal ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'} (f g : OrdinalEquiv M N) where
  private
    module M = OrdinalStr (snd M)
    module N = OrdinalStr (snd N)
    module f = IsOrdinalEquiv (snd f)
    module g = IsOrdinalEquiv (snd g)

  OrdinalEquiv-unique-value : ‚àÄ (x : ‚ü® M ‚ü©) ‚Üí equivFun (fst f) x ‚â° equivFun (fst g) x
  OrdinalEquiv-unique-value =
    M.induction Œª x rec ‚Üí
    N.extensional _ _ Œª c ‚Üí
      (Œª c<fx ‚Üí let ff‚Åª¬πc‚â°c = secEq (fst f) c
                    ff‚Åª¬πc<fx = subst‚Åª (Œª a ‚Üí a N.< equivFun (fst f) x) ff‚Åª¬πc‚â°c c<fx
                    f‚Åª¬πc<x = invEq (f.pres< (invEq (fst f) c) x) ff‚Åª¬πc<fx
                    c‚â°gf‚Åª¬πc = sym ff‚Åª¬πc‚â°c ‚àô rec (invEq (fst f) c) f‚Åª¬πc<x
                    g‚Åª¬πc‚â°f‚Åª¬πc = {!   !}
                in {! equivFun (g.pres< ? ?) ?  !}) ,
      {!   !}


-- module PosetReasoning (P' : Ordinal ‚Ñì ‚Ñì') where
--  private P = fst P'
--  open OrdinalStr (snd P')
--  open IsOrdinal

--  _‚â§‚ü®_‚ü©_ : (x : P) {y z : P} ‚Üí x < y ‚Üí y < z ‚Üí x < z
--  x ‚â§‚ü® p ‚ü© q = isOrdinal .is-trans x _ _ p q

--  _‚óæ : (x : P) ‚Üí x < x
--  x ‚óæ = isOrdinal .is-refl x

--  infixr 0 _‚â§‚ü®_‚ü©_
--  infix  1 _‚óæ
